<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd" version="0.3" xml:lang="en">
  <siteinfo>
    <sitename>sbgn.org</sitename>
    <base>http://www.sbgn.org/Main_Page</base>
    <generator>MediaWiki 1.12.0</generator>
    <case>first-letter</case>
      <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0" />
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">sbgn.org</namespace>
      <namespace key="5">sbgn.org talk</namespace>
      <namespace key="6">Image</namespace>
      <namespace key="7">Image talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
      <namespace key="274">Widget</namespace>
      <namespace key="275">Widget talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>LibSBGN/Developer Tutorial C++</title>
    <id>788</id>
    <revision>
      <id>3021</id>
      <timestamp>2012-11-05T18:17:46Z</timestamp>
      <contributor>
        <username>Tczauderna</username>
        <id>67</id>
      </contributor>
      <comment>New page: =DISCLAIMER: WORK IN PROGRESS= The system was successfully built and tested on MacOSX Snow Leopard.  	 ==TODO== * streamline the automatic building process for all supported systems * pack...</comment>
      <text xml:space="preserve">=DISCLAIMER: WORK IN PROGRESS=
The system was successfully built and tested on MacOSX Snow Leopard.
 	
==TODO==
* streamline the automatic building process for all supported systems
* package the resulting files as a standalone library

=Where to find LibSBGN C++?=
LibSBGN C++ can be found in the [http://libsbgn.svn.sourceforge.net/viewvc/libsbgn/trunk/cpp_binding/ SVN repository].

To download the latest version on your machine:
 svn co https://libsbgn.svn.sourceforge.net/svnroot/libsbgn libsbgn

=What's in the LibSBGN C++ folder?=

==SBGN C++ binder==
'''sbgn.cxx''' and '''sbgn.hxx''' [FOR REFERENCE ONLY, MAY NOT BE UP-TO-DATE]
* automatically generated from the [http://libsbgn.svn.sourceforge.net/viewvc/libsbgn/trunk/resources/SBGN.xsd SBGN-ML schema]
* using the [http://www.codesynthesis.com/products/xsd following tool]
This library can read and write SBGN-ML files, and validate their syntax against the schema.

==Example of code using the binder==
'''sbgn2txt.cxx'''
* in = some *.sbgn files
* out = a text description (or validation errors, if any)

==Tools required to generate the binder==
'''makefile''' [included], and a local installation of the XSD converter [NOT INCLUDED]
* &quot;make libsbgn&quot; generates '''sbgn.cxx''' and '''sbgn.hxx''' from the current XSD
* &quot;make test&quot; compiles and runs '''sbgn2txt''' on all *.sbgn files in the [http://libsbgn.svn.sourceforge.net/viewvc/libsbgn/trunk/test-files/ test-files folder]

=How to (re)build the binder?=
'''sbgn.hxx''' and '''sbgn.cxx''' are generated automatically from '''SBGN.xsd'''.

To stay up-to-date with the latest specifications, these files should be rebuilt whenever the XSD is modified.

==Download the XSD =&gt; C++ conversion tool==
* Download the correct version of the [http://www.codesynthesis.com/products/xsd/download.xhtml conversion tool] for your platform
* Uncompress the downloaded file in the current directory.
We'll call the resulting directory ''XSD2CPP'' in the following instructions.

==Test the conversion tool==
Make sure the conversion tool works properly on your system:
 cd ''XSD2CPP''/examples/cxx/tree/hello
 make
If not, consult the tool's documentation to fix the problem (cf. ''XSD2CPP''/documentation)

==Build LibSBGN C++==
* Modify the first line of the makefile to link to the correct root directory:
 root := ./''XSD2CPP''/examples
* To update the binder against the latest version of the XSD, and run tests against all the test files:
 make

=How to reuse the binder?=
In order to reuse '''sbgn.hxx''' and '''sbgn.cxx''' in your own project, you need to be able to link to a copy of '''libxsd''' (cf. ''XSD2CPP''/libxsd)

For building and linking options (dependencies, system specific settings, etc.), have a look at ''XSD2CPP''/examples/build

Refer to '''sbgn2txt.cxx''' for examples of how to invoke the library in your own code, e.g.:

==Read an SBGN-ML file==
 try
 {
  xml_schema::properties props; // to store information on the XSD for validation purposes
  props.schema_location (&quot;http://sbgn.org/libsbgn/pd/0.1&quot;, &quot;../resources/SBGN.xsd&quot;);
  
  auto_ptr&lt;libsbgn::pd_0_1::sbgn&gt; mysbgnobject ( libsbgn::pd_0_1::sbgn_ (''sbgnmlfile'', 0, props) );
  // [..] do something with mysbgnobject
 }
 // validation errors result in an exception being thrown
 catch (const xml_schema::exception&amp; e)
 {
  cerr &lt;&lt; &quot;SBGN-ML parsing error: &quot; &lt;&lt; e &lt;&lt; endl;
 }

==Traverse the SBGN-ML structure==
 // For each map
 for (libsbgn::pd_0_1::sbgn::map_const_iterator m (mysbgnobject-&gt;map ().begin ()); m != s-&gt;map ().end (); ++m)
 {
  cout &lt;&lt; &quot;Map&quot; &lt;&lt; endl;
  
  // For each high level glyph
  for (libsbgn::pd_0_1::map::glyph_const_iterator g (m-&gt;glyph ().begin ()); g != m-&gt;glyph ().end (); ++g)
  {
   cout &lt;&lt; &quot;\tGlyph &quot; &lt;&lt; g.id() &lt;&lt; &quot; (&quot; &lt;&lt; g.class_() &lt;&lt; &quot;)&quot; &lt;&lt; endl;
   // process glyph internal attributes and elements: label, subglyphs, etc.
  }
  
  // For each arc
  for (libsbgn::pd_0_1::map::arc_const_iterator a (m-&gt;arc ().begin ()); a != m-&gt;arc ().end (); ++a)
  {
    cout &lt;&lt; &quot;\tArc from &quot; &lt;&lt; a-&gt;source() &lt;&lt; &quot; to &quot; &lt;&lt; a-&gt;target() &lt;&lt; &quot; (&quot; &lt;&lt; a-&gt;class_() &lt;&lt; &quot;)&quot; &lt;&lt; endl;
    // process arc internal attributes and elements: geometric path, stoichiometry, etc.
  }
 }</text>
    </revision>
  </page>
</mediawiki>
